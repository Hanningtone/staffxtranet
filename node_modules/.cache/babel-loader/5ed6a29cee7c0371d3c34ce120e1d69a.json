{"ast":null,"code":"import e, { createElement as o, useState as t, useEffect as r } from \"react\";\nimport { setup as n, styled as i } from \"goober\";\nimport { shouldForwardProp as l } from \"goober/should-forward-prop\";\n\nfunction d() {\n  return (d = Object.assign || function (e) {\n    for (var o = 1; o < arguments.length; o++) {\n      var t = arguments[o];\n\n      for (var r in t) Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);\n    }\n\n    return e;\n  }).apply(this, arguments);\n}\n\nlet a,\n    s,\n    c,\n    p,\n    u = e => e;\n\nconst b = [\"fontSize\", \"fontColor\", \"selectedFontColor\", \"optionsAmount\", \"optionBorderRadius\", \"isRawText\", \"selectedIndex\", \"border\", \"backgroundColor\", \"selectedBackgroundColor\", \"wrapperBorderRadius\", \"selectionIndicatorMargin\", \"disabled\"];\nn(o, void 0, void 0, l(e => !b.includes(e)));\nconst g = i(\"div\")(a || (a = u`\n    display: flex;\n    border-radius: ${0};\n    border: ${0};\n    background: ${0};\n    width: 100%;\n    height: 100%;\n    position: relative;\n    opacity: ${0};\n    overflow: hidden;\n\n    &::before {\n        top: 50%;\n        left: ${0}%;\n        content: \"\";\n        position: absolute;\n        height: calc(100% - ${0}px);\n        width: calc(\n            ${0}%${0}${0}px\n        );\n        border-radius: ${0};\n        border: ${0}px solid\n            ${0};\n        background: ${0};\n        transition: left 0.1s linear, background 0.1s linear;\n        transform: translateY(-50%);\n        z-index: 1;\n        box-sizing: content-box;\n    }\n`), _ref => {\n  let {\n    wrapperBorderRadius: e\n  } = _ref;\n  return \"number\" == typeof e ? `${e}px` : e;\n}, e => e.border, e => e.backgroundColor, e => e.disabled ? .7 : 1, e => e.selectedIndex / e.optionsAmount * 100, e => 2 * e.selectionIndicatorMargin, e => 1 / e.optionsAmount * 100, \" - \", e => 2 * e.selectionIndicatorMargin, _ref2 => {\n  let {\n    optionBorderRadius: e\n  } = _ref2;\n  return \"number\" == typeof e ? `${e}px` : e;\n}, e => e.selectionIndicatorMargin, e => e.backgroundColor, e => e.selectedBackgroundColor),\n      f = i(\"div\")(s || (s = u`\n    display: flex;\n    align-items: center;\n    height: 100%;\n    width: ${0}%;\n    border-radius: ${0};\n`), e => 1 / e.optionsAmount * 100, _ref3 => {\n  let {\n    optionBorderRadius: e\n  } = _ref3;\n  return \"number\" == typeof e ? `${e}px` : e;\n}),\n      h = i(\"label\")(c || (c = u`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    z-index: 2;\n    transition: color 0.1s linear;\n    cursor: ${0};\n    font-size: ${0};\n    color: ${0};\n`), e => e.disabled ? \"not-allowed\" : \"pointer\", e => e.isRawText ? e.fontSize + \"px\" : \"unset\", e => e.isRawText ? e.selected ? e.selectedFontColor : e.fontColor : \"unset\"),\n      C = i(\"input\")(p || (p = u`\n    width: 0;\n    height: 0;\n    opacity: 0;\n    z-index: -1;\n    position: absolute;\n    pointer-events: none;\n`)),\n      m = {\n  backgroundColor: \"#ecf0f1\",\n  selectedBackgroundColor: \"#2ecc71\",\n  fontColor: \"#000\",\n  selectedFontColor: \"#fff\"\n};\nexport default (o => {\n  var n;\n  const {\n    onChange: i = () => {},\n    options: l = [],\n    initialSelectedIndex: a = 0\n  } = o,\n        s = !!l[a],\n        [c, p] = t(s ? a : 0),\n        {\n    border: u = 0,\n    backgroundColor: b = m.backgroundColor,\n    selectedBackgroundColor: x = m.selectedBackgroundColor,\n    wrapperBorderRadius: w = 20,\n    optionBorderRadius: $ = 18,\n    fontSize: k = 14,\n    fontColor: B = m.fontColor,\n    selectedFontColor: y = m.selectedFontColor,\n    selectionIndicatorMargin: v = 2,\n    forcedSelectedIndex: R,\n    disabled: I = !1,\n    name: z\n  } = o;\n  return r(() => {\n    void 0 !== R && l[R] && R !== c && p(R);\n  }, [R, l, c]), l.length ? e.createElement(g, {\n    selectedIndex: c,\n    optionsAmount: l.length,\n    className: \"react-switch-selector-wrapper \" + (I ? \"react-switch-selector-disabled\" : \"\"),\n    border: u,\n    backgroundColor: b,\n    selectedBackgroundColor: (null == (n = l[c]) ? void 0 : n.selectedBackgroundColor) || x,\n    wrapperBorderRadius: w,\n    optionBorderRadius: $,\n    selectionIndicatorMargin: v,\n    disabled: I,\n    role: \"radiogroup\",\n    \"aria-labelledby\": z\n  }, l.map((o, t) => {\n    const r = c === t,\n          n = `${null != z ? z : \"rss\"}-option-${t}`,\n          a = \"string\" == typeof o.label;\n    return e.createElement(f, {\n      key: n,\n      optionsAmount: l.length,\n      className: \"react-switch-selector-option react-switch-selector-option-\" + (r ? \"selected\" : \"unselected\"),\n      optionBorderRadius: $\n    }, e.createElement(h, d({\n      className: \"react-switch-selector-option-label\",\n      selected: r,\n      isRawText: a,\n      disabled: I,\n      \"aria-disabled\": I,\n      htmlFor: n\n    }, a ? {\n      fontSize: k,\n      fontColor: o.fontColor || B,\n      selectedFontColor: o.selectedFontColor || y\n    } : {}), e.createElement(C, {\n      type: \"radio\",\n      id: n,\n      name: z,\n      onChange: () => (e => {\n        I || e === c || (p(e), i(l[e].value));\n      })(t),\n      checked: r,\n      \"aria-checked\": r,\n      tabIndex: r ? 0 : -1\n    }), o.label));\n  })) : null;\n});","map":{"version":3,"mappings":"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","names":["propToOmitInDom","setup","createElement","undefined","shouldForwardProp","prop","includes","SwitchSelectorWrapper","styled","wrapperBorderRadius","props","border","backgroundColor","disabled","selectedIndex","optionsAmount","selectionIndicatorMargin","optionBorderRadius","selectedBackgroundColor","OptionItem","OptionItemLabel","isRawText","fontSize","selected","selectedFontColor","fontColor","OptionInput","defaultColors","onChange","options","initialSelectedIndex","canApplyInitialSelectedIndex","setSelectedIndex","useState","forcedSelectedIndex","name","useEffect","length","React","className","role","map","option","index","isSelected","optionId","label","key","htmlFor","type","id","value","checked","tabIndex"],"sources":["/Users/wachiye/works/uncover/staff/node_modules/react-switch-selector/src/SwitchSelector.styled.ts","/Users/wachiye/works/uncover/staff/node_modules/react-switch-selector/src/defaultColors.ts","/Users/wachiye/works/uncover/staff/node_modules/react-switch-selector/src/SwitchSelector.tsx"],"sourcesContent":["import {createElement} from \"react\";\nimport {setup, styled} from \"goober\";\nimport {shouldForwardProp} from \"goober/should-forward-prop\";\nimport CSS from \"csstype\";\n\nconst propToOmitInDom = [\n    \"fontSize\",\n    \"fontColor\",\n    \"selectedFontColor\",\n    \"optionsAmount\",\n    \"optionBorderRadius\",\n    \"isRawText\",\n    \"selectedIndex\",\n    \"border\",\n    \"backgroundColor\",\n    \"selectedBackgroundColor\",\n    \"wrapperBorderRadius\",\n    \"selectionIndicatorMargin\",\n    \"disabled\"\n];\n\nsetup(\n    createElement,\n    undefined,\n    undefined,\n    shouldForwardProp((prop) => !propToOmitInDom.includes(prop))\n);\n\nexport type StylingPropsTypes = {\n    border: string | number;\n    backgroundColor: string;\n    selectedBackgroundColor: string;\n    wrapperBorderRadius: number | CSS.Property.BorderRadius<string>;\n    optionBorderRadius: number | CSS.Property.BorderRadius<string>;\n    fontSize: number;\n    fontColor: string;\n    selectedFontColor: string;\n    selectionIndicatorMargin: number;\n};\n\ninterface SwitchSelectorWrapperPropTypes\n    extends Pick<\n        StylingPropsTypes,\n        | \"border\"\n        | \"backgroundColor\"\n        | \"selectedBackgroundColor\"\n        | \"wrapperBorderRadius\"\n        | \"optionBorderRadius\"\n        | \"selectionIndicatorMargin\"\n    > {\n    selectedIndex: number;\n    optionsAmount: number;\n    disabled: boolean;\n}\n\nexport const SwitchSelectorWrapper = styled(\"div\")<SwitchSelectorWrapperPropTypes>`\n    display: flex;\n    border-radius: ${({wrapperBorderRadius}) =>\n        typeof wrapperBorderRadius === \"number\" ? `${wrapperBorderRadius}px` : wrapperBorderRadius};\n    border: ${(props) => props.border};\n    background: ${(props) => props.backgroundColor};\n    width: 100%;\n    height: 100%;\n    position: relative;\n    opacity: ${(props) => (props.disabled ? 0.7 : 1)};\n    overflow: hidden;\n\n    &::before {\n        top: 50%;\n        left: ${(props) => (props.selectedIndex / props.optionsAmount) * 100}%;\n        content: \"\";\n        position: absolute;\n        height: calc(100% - ${(props) => 2 * props.selectionIndicatorMargin}px);\n        width: calc(\n            ${(props) => (1 / props.optionsAmount) * 100}%${\" - \"}${(props) =>\n                    2 * props.selectionIndicatorMargin}px\n        );\n        border-radius: ${({optionBorderRadius}) =>\n            typeof optionBorderRadius === \"number\"\n                ? `${optionBorderRadius}px`\n                : optionBorderRadius};\n        border: ${(props) => props.selectionIndicatorMargin}px solid\n            ${(props) => props.backgroundColor};\n        background: ${(props) => props.selectedBackgroundColor};\n        transition: left 0.1s linear, background 0.1s linear;\n        transform: translateY(-50%);\n        z-index: 1;\n        box-sizing: content-box;\n    }\n`;\n\ninterface OptionItemPropsTypes extends Pick<StylingPropsTypes, \"optionBorderRadius\"> {\n    optionsAmount: number;\n}\n\nexport const OptionItem = styled(\"div\")<OptionItemPropsTypes>`\n    display: flex;\n    align-items: center;\n    height: 100%;\n    width: ${(props) => (1 / props.optionsAmount) * 100}%;\n    border-radius: ${({optionBorderRadius}) =>\n        typeof optionBorderRadius === \"number\" ? `${optionBorderRadius}px` : optionBorderRadius};\n`;\n\ninterface OptionItemLabelPropsTypes\n    extends Partial<Pick<StylingPropsTypes, \"fontSize\" | \"fontColor\" | \"selectedFontColor\">> {\n    isRawText: boolean;\n    selected: boolean;\n    disabled: boolean;\n}\n\nexport const OptionItemLabel = styled(\"label\")<OptionItemLabelPropsTypes>`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    z-index: 2;\n    transition: color 0.1s linear;\n    cursor: ${(props) => (props.disabled ? \"not-allowed\" : \"pointer\")};\n    font-size: ${(props) => (props.isRawText ? props.fontSize + \"px\" : \"unset\")};\n    color: ${(props) =>\n        props.isRawText ? (props.selected ? props.selectedFontColor : props.fontColor) : \"unset\"};\n`;\n\nexport const OptionInput = styled(\"input\")`\n    width: 0;\n    height: 0;\n    opacity: 0;\n    z-index: -1;\n    position: absolute;\n    pointer-events: none;\n`;\n","export const defaultColors = {\n    backgroundColor: \"#ecf0f1\",\n    selectedBackgroundColor: \"#2ecc71\",\n    fontColor: \"#000\",\n    selectedFontColor: \"#fff\"\n};\n","import React, {FC, useState, useEffect} from \"react\";\nimport {\n    SwitchSelectorWrapper,\n    OptionItem,\n    OptionItemLabel,\n    OptionInput\n} from \"./SwitchSelector.styled\";\nimport {SwitchSelectorProps} from \"./SwitchSelector.props\";\nimport {defaultColors} from \"./defaultColors\";\n\nconst CLASS_NAMES_PREFIX = \"react-switch-selector\";\n\nconst SwitchSelector: FC<SwitchSelectorProps> = (props) => {\n    const {onChange = (): void => {}, options = [], initialSelectedIndex = 0} = props;\n    const canApplyInitialSelectedIndex = !!options[initialSelectedIndex];\n    const [selectedIndex, setSelectedIndex] = useState(\n        canApplyInitialSelectedIndex ? initialSelectedIndex : 0\n    );\n\n    const {\n        border = 0,\n        backgroundColor = defaultColors.backgroundColor,\n        selectedBackgroundColor = defaultColors.selectedBackgroundColor,\n        wrapperBorderRadius = 20,\n        optionBorderRadius = 18,\n        fontSize = 14,\n        fontColor = defaultColors.fontColor,\n        selectedFontColor = defaultColors.selectedFontColor,\n        selectionIndicatorMargin = 2,\n        forcedSelectedIndex,\n        disabled = false,\n        name\n    } = props;\n\n    useEffect(() => {\n        if (\n            forcedSelectedIndex !== undefined &&\n            !!options[forcedSelectedIndex] &&\n            forcedSelectedIndex !== selectedIndex\n        ) {\n            setSelectedIndex(forcedSelectedIndex);\n        }\n    }, [forcedSelectedIndex, options, selectedIndex]);\n\n    const handleOnClick = (index: number): void => {\n        if (!disabled && index !== selectedIndex) {\n            setSelectedIndex(index);\n            onChange(options[index].value);\n        }\n    };\n\n    const renderOptions = (): React.ReactElement[] => {\n        return options.map((option, index) => {\n            const isSelected = selectedIndex === index;\n            const optionId = `${name ?? \"rss\"}-option-${index}`;\n            const isRawText = typeof option.label === \"string\";\n\n            const labelRawTextProps = {\n                fontSize,\n                fontColor: option.fontColor || fontColor,\n                selectedFontColor: option.selectedFontColor || selectedFontColor\n            };\n\n            return (\n                <OptionItem\n                    key={optionId}\n                    optionsAmount={options.length}\n                    className={`${CLASS_NAMES_PREFIX}-option ${CLASS_NAMES_PREFIX}-option-${\n                        isSelected ? \"selected\" : \"unselected\"\n                    }`}\n                    optionBorderRadius={optionBorderRadius}\n                >\n                    <OptionItemLabel\n                        className={`${CLASS_NAMES_PREFIX}-option-label`}\n                        selected={isSelected}\n                        isRawText={isRawText}\n                        disabled={disabled}\n                        aria-disabled={disabled}\n                        htmlFor={optionId}\n                        {...(isRawText ? labelRawTextProps : {})}\n                    >\n                        <OptionInput\n                            type=\"radio\"\n                            id={optionId}\n                            name={name}\n                            onChange={(): void => handleOnClick(index)}\n                            checked={isSelected}\n                            aria-checked={isSelected}\n                            tabIndex={isSelected ? 0 : -1}\n                        />\n                        {option.label}\n                    </OptionItemLabel>\n                </OptionItem>\n            );\n        });\n    };\n\n    if (!options.length) return null;\n    return (\n        <SwitchSelectorWrapper\n            selectedIndex={selectedIndex}\n            optionsAmount={options.length}\n            className={`${CLASS_NAMES_PREFIX}-wrapper ${\n                disabled ? `${CLASS_NAMES_PREFIX}-disabled` : \"\"\n            }`}\n            border={border}\n            backgroundColor={backgroundColor}\n            selectedBackgroundColor={\n                options[selectedIndex]?.selectedBackgroundColor || selectedBackgroundColor\n            }\n            wrapperBorderRadius={wrapperBorderRadius}\n            optionBorderRadius={optionBorderRadius}\n            selectionIndicatorMargin={selectionIndicatorMargin}\n            disabled={disabled}\n            role={\"radiogroup\"}\n            aria-labelledby={name}\n        >\n            {renderOptions()}\n        </SwitchSelectorWrapper>\n    );\n};\n\nexport default SwitchSelector;\n"]},"metadata":{},"sourceType":"module"}