{"ast":null,"code":"import React from 'react';\nimport { useSortable, sortableKeyboardCoordinates, SortableContext, horizontalListSortingStrategy, verticalListSortingStrategy, arrayMove } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { useSensors, useSensor, PointerSensor, KeyboardSensor, DndContext, closestCenter } from '@dnd-kit/core';\n\nvar SortableItem = function SortableItem(props) {\n  var DragHandler = props.DragHandler,\n      className = props.className;\n\n  var _useSortable = useSortable({\n    id: props.id\n  }),\n      attributes = _useSortable.attributes,\n      listeners = _useSortable.listeners,\n      setNodeRef = _useSortable.setNodeRef,\n      transform = _useSortable.transform,\n      transition = _useSortable.transition;\n\n  var style = {\n    transform: CSS.Transform.toString(transform),\n    transition: transition\n  };\n  return DragHandler ? React.createElement(\"div\", {\n    ref: setNodeRef,\n    style: style,\n    className: className\n  }, React.createElement(DragHandler, Object.assign({}, attributes, listeners)), props.children) : React.createElement(\"div\", Object.assign({\n    ref: setNodeRef,\n    style: style\n  }, attributes, listeners, {\n    className: className\n  }), props.children);\n};\n\nvar SortableList = function SortableList(props) {\n  var items = props.items,\n      setItems = props.setItems,\n      children = props.children,\n      itemRender = props.itemRender,\n      horizontal = props.horizontal;\n  var sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {\n    coordinateGetter: sortableKeyboardCoordinates\n  }));\n  return React.createElement(DndContext, {\n    sensors: sensors,\n    collisionDetection: closestCenter,\n    onDragEnd: handleDragEnd\n  }, React.createElement(SortableContext, {\n    items: items,\n    strategy: horizontal ? horizontalListSortingStrategy : verticalListSortingStrategy\n  }, children ? children({\n    items: items\n  }) : items.map(function (item) {\n    return React.createElement(SortableItem, {\n      key: item.id,\n      id: item.id\n    }, itemRender({\n      item: item\n    }));\n  })));\n\n  function handleDragEnd(event) {\n    var active = event.active,\n        over = event.over;\n\n    if (active.id !== over.id) {\n      setItems(function (items) {\n        var ids = items.map(function (item) {\n          return item.id;\n        });\n        var oldIndex = ids.indexOf(active.id);\n        var newIndex = ids.indexOf(over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  }\n};\n\nexport { SortableItem, SortableList };","map":{"version":3,"mappings":"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","names":["SortableItem","props","DragHandler","className","useSortable","id","attributes","listeners","setNodeRef","transform","transition","style","CSS","Transform","toString","React","ref","children","SortableList","items","setItems","itemRender","horizontal","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","DndContext","collisionDetection","closestCenter","onDragEnd","handleDragEnd","SortableContext","strategy","horizontalListSortingStrategy","verticalListSortingStrategy","map","item","key","event","active","over","ids","oldIndex","indexOf","newIndex","arrayMove"],"sources":["/Users/wachiye/works/uncover/staff/node_modules/@thaddeusjiang/react-sortable-list/src/components/SortableList/SortableItem.tsx","/Users/wachiye/works/uncover/staff/node_modules/@thaddeusjiang/react-sortable-list/src/components/SortableList/SortableList.tsx"],"sourcesContent":["import React from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { SortableItemProps } from './SortableList';\n\nexport const SortableItem = (props: SortableItemProps) => {\n  const { DragHandler, className } = props;\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({ id: props.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return DragHandler ? (\n    <div ref={setNodeRef} style={style} className={className}>\n      <DragHandler {...attributes} {...listeners} />\n      {props.children}\n    </div>\n  ) : (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n      className={className}\n    >\n      {props.children}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n  horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\n\nimport { SortableItem } from './SortableItem';\n\nexport type SortableItemProps = {\n  id: string;\n  DragHandler?: FC;\n  className?: string;\n} & {\n  [key: string]: any;\n};\n\nexport type ItemRenderProps = {\n  item: SortableItemProps;\n};\n\nexport type ChildrenProps = {\n  items: SortableItemProps[];\n};\n\nexport type SortableListProps = {\n  items: SortableItemProps[];\n  setItems: React.Dispatch<React.SetStateAction<SortableItemProps[]>>;\n  itemRender?: ({ item }: ItemRenderProps) => JSX.Element;\n  children?: ({ items }: ChildrenProps) => JSX.Element;\n  horizontal?: boolean;\n};\n\n// TODO: Headless UI Component\nexport const SortableList: FC<SortableListProps> = (props) => {\n  const { items, setItems, children, itemRender, horizontal } = props;\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragEnd={handleDragEnd}\n    >\n      <SortableContext\n        items={items}\n        strategy={\n          horizontal\n            ? horizontalListSortingStrategy\n            : verticalListSortingStrategy\n        }\n      >\n        {children\n          ? children({ items })\n          : items.map((item) => {\n              return (\n                <SortableItem key={item.id} id={item.id}>\n                  {/* @ts-ignore */}\n                  {itemRender({ item })}\n                </SortableItem>\n              );\n            })}\n      </SortableContext>\n    </DndContext>\n  );\n\n  function handleDragEnd(event: { active: any; over: any }) {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setItems((items: SortableItemProps[]) => {\n        const ids = items.map((item: SortableItemProps) => item.id);\n        const oldIndex = ids.indexOf(active.id);\n        const newIndex = ids.indexOf(over.id);\n\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}