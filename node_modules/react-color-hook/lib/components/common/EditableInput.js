function _defineProperty(a,b,c){return b in a?Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}):a[b]=c,a}function _slicedToArray(a,b){return _arrayWithHoles(a)||_iterableToArrayLimit(a,b)||_unsupportedIterableToArray(a,b)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(a,b){if(a){if("string"==typeof a)return _arrayLikeToArray(a,b);var c=Object.prototype.toString.call(a).slice(8,-1);return"Object"===c&&a.constructor&&(c=a.constructor.name),"Map"===c||"Set"===c?Array.from(a):"Arguments"===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?_arrayLikeToArray(a,b):void 0}}function _arrayLikeToArray(a,b){(null==b||b>a.length)&&(b=a.length);for(var c=0,d=Array(b);c<b;c++)d[c]=a[c];return d}function _iterableToArrayLimit(a,b){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(a)){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a}finally{try{d||null==h["return"]||h["return"]()}finally{if(e)throw f}}return c}}function _arrayWithHoles(a){if(Array.isArray(a))return a}import React,{useEffect,useState,useRef}from"react";import PropTypes from"prop-types";import{editableInputStyle}from"./commonStyles";var DEFAULT_ARROW_OFFSET=1,UP_KEY_CODE=38,DOWN_KEY_CODE=40,VALID_KEY_CODES=[UP_KEY_CODE,DOWN_KEY_CODE],isNumber=function(a){return!Number.isNaN(parseFloat(a))},isValidKeyCode=function(a){return-1<VALID_KEY_CODES.indexOf(a)},getFormattedPercentage=function(a){return"".concat(a.replace(/%/g,""),"%")},getNumberValue=function(a){return+(a+"").replace(/%/g,"")},getIsPercentage=function(a){return-1<(a+"").indexOf("%")},EditableInput=function(a){var b=a.value,c=useState((b+"").toUpperCase()),d=_slicedToArray(c,2),e=d[0],f=d[1],g=useState((b+"").toUpperCase()),h=_slicedToArray(g,2),i=h[0],j=h[1],k=useRef(null),l=function(b){return _defineProperty({},a.label,b)},m=function(b){var c=Math.round(getNumberValue(a.value)+getNumberValue(b.movementX));0<=c&&c<=a.dragMax&&a.onChange(l(c),b)},n=function(b,c){var d=a.label?l(b):b;a.onChange(d,c);var e=getIsPercentage(c.target.value);f(e?getFormattedPercentage(b):b)},o=function(){window.removeEventListener("mousemove",m),window.removeEventListener("mouseup",o)};useEffect(function(){k.current&&k.current===document.activeElement?j((b+"").toUpperCase()):(j(!i&&(b+"").toUpperCase()),f((b+"").toUpperCase()))},[b]),useEffect(function(){return function(){return o()}},[]);var p=a.style,q=editableInputStyle(a,p),r=a.placeholder,s=a.hideLabel,t=a.label;return/*#__PURE__*/React.createElement("div",{style:q.wrap},/*#__PURE__*/React.createElement("input",{style:q.input,ref:k,value:e,onKeyDown:function handleKeyDown(b){// In case `e.target.value` is a percentage remove the `%` character
// and update accordingly with a percentage
// https://github.com/casesandberg/react-color/issues/383
var c=getNumberValue(b.target.value);if(isNumber(c)&&isValidKeyCode(b.keyCode)){var d=a.arrowOffset,e=b.keyCode===UP_KEY_CODE?c+d:c-d;n(e,b)}},onChange:function handleChange(a){n(a.target.value,a)},onBlur:function handleBlur(){i&&(f(i),j(null))},placeholder:r,spellCheck:"false"}),t&&!s?/*#__PURE__*/React.createElement("span",{style:q.label,onMouseDown:function handleMouseDown(b){a.dragLabel&&(b.preventDefault(),m(b),window.addEventListener("mousemove",m),window.addEventListener("mouseup",o))},role:"button",tabIndex:0},t):null)};export default EditableInput;EditableInput.defaultProps={style:{wrap:{},input:{},label:{}},arrowOffset:1,placeholder:"",hideLabel:!1,dragMax:"",dragLabel:"",label:"",onChange:function onChange(){}},EditableInput.propTypes={value:PropTypes.string.isRequired,label:PropTypes.string,dragLabel:PropTypes.string,dragMax:PropTypes.string,onChange:PropTypes.func,hideLabel:PropTypes.bool,placeholder:PropTypes.string,arrowOffset:PropTypes.number,style:PropTypes.shape({wrap:PropTypes.shape({}),label:PropTypes.shape({}),input:PropTypes.shape({})})};